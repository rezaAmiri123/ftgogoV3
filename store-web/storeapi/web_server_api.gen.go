// Package storeapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package storeapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Address defines model for Address.
type Address struct {
	City    string  `json:"city"`
	State   string  `json:"state"`
	Street1 string  `json:"street1"`
	Street2 *string `json:"street2,omitempty"`
	Zip     string  `json:"zip"`
}

// MenuItem defines model for MenuItem.
type MenuItem struct {
	Id    string `json:"id"`
	Name  string `json:"name"`
	Price int    `json:"price"`
}

// RestaurantID defines model for RestaurantID.
type RestaurantID = openapi_types.UUID

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// RestaurantIDResponse defines model for RestaurantIDResponse.
type RestaurantIDResponse struct {
	Id string `json:"id"`
}

// CreateRestaurantJSONBody defines parameters for CreateRestaurant.
type CreateRestaurantJSONBody struct {
	Address Address `json:"address"`
	Name    string  `json:"name"`
}

// UpdateRestaurantMenuJSONBody defines parameters for UpdateRestaurantMenu.
type UpdateRestaurantMenuJSONBody struct {
	Menu struct {
		MenuItems []MenuItem `json:"menu_items"`
	} `json:"menu"`
}

// CreateRestaurantJSONRequestBody defines body for CreateRestaurant for application/json ContentType.
type CreateRestaurantJSONRequestBody CreateRestaurantJSONBody

// UpdateRestaurantMenuJSONRequestBody defines body for UpdateRestaurantMenu for application/json ContentType.
type UpdateRestaurantMenuJSONRequestBody UpdateRestaurantMenuJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateRestaurantWithBody request with any body
	CreateRestaurantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRestaurant(ctx context.Context, body CreateRestaurantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRestaurantMenuWithBody request with any body
	UpdateRestaurantMenuWithBody(ctx context.Context, restaurantID RestaurantID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRestaurantMenu(ctx context.Context, restaurantID RestaurantID, body UpdateRestaurantMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateRestaurantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRestaurantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRestaurant(ctx context.Context, body CreateRestaurantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRestaurantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRestaurantMenuWithBody(ctx context.Context, restaurantID RestaurantID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRestaurantMenuRequestWithBody(c.Server, restaurantID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRestaurantMenu(ctx context.Context, restaurantID RestaurantID, body UpdateRestaurantMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRestaurantMenuRequest(c.Server, restaurantID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateRestaurantRequest calls the generic CreateRestaurant builder with application/json body
func NewCreateRestaurantRequest(server string, body CreateRestaurantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRestaurantRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRestaurantRequestWithBody generates requests for CreateRestaurant with any type of body
func NewCreateRestaurantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRestaurantMenuRequest calls the generic UpdateRestaurantMenu builder with application/json body
func NewUpdateRestaurantMenuRequest(server string, restaurantID RestaurantID, body UpdateRestaurantMenuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRestaurantMenuRequestWithBody(server, restaurantID, "application/json", bodyReader)
}

// NewUpdateRestaurantMenuRequestWithBody generates requests for UpdateRestaurantMenu with any type of body
func NewUpdateRestaurantMenuRequestWithBody(server string, restaurantID RestaurantID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurantID", runtime.ParamLocationPath, restaurantID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants/%s/menu", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateRestaurantWithBodyWithResponse request with any body
	CreateRestaurantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRestaurantResponse, error)

	CreateRestaurantWithResponse(ctx context.Context, body CreateRestaurantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRestaurantResponse, error)

	// UpdateRestaurantMenuWithBodyWithResponse request with any body
	UpdateRestaurantMenuWithBodyWithResponse(ctx context.Context, restaurantID RestaurantID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRestaurantMenuResponse, error)

	UpdateRestaurantMenuWithResponse(ctx context.Context, restaurantID RestaurantID, body UpdateRestaurantMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRestaurantMenuResponse, error)
}

type CreateRestaurantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RestaurantIDResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateRestaurantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRestaurantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRestaurantMenuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateRestaurantMenuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRestaurantMenuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateRestaurantWithBodyWithResponse request with arbitrary body returning *CreateRestaurantResponse
func (c *ClientWithResponses) CreateRestaurantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRestaurantResponse, error) {
	rsp, err := c.CreateRestaurantWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRestaurantResponse(rsp)
}

func (c *ClientWithResponses) CreateRestaurantWithResponse(ctx context.Context, body CreateRestaurantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRestaurantResponse, error) {
	rsp, err := c.CreateRestaurant(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRestaurantResponse(rsp)
}

// UpdateRestaurantMenuWithBodyWithResponse request with arbitrary body returning *UpdateRestaurantMenuResponse
func (c *ClientWithResponses) UpdateRestaurantMenuWithBodyWithResponse(ctx context.Context, restaurantID RestaurantID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRestaurantMenuResponse, error) {
	rsp, err := c.UpdateRestaurantMenuWithBody(ctx, restaurantID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRestaurantMenuResponse(rsp)
}

func (c *ClientWithResponses) UpdateRestaurantMenuWithResponse(ctx context.Context, restaurantID RestaurantID, body UpdateRestaurantMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRestaurantMenuResponse, error) {
	rsp, err := c.UpdateRestaurantMenu(ctx, restaurantID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRestaurantMenuResponse(rsp)
}

// ParseCreateRestaurantResponse parses an HTTP response from a CreateRestaurantWithResponse call
func ParseCreateRestaurantResponse(rsp *http.Response) (*CreateRestaurantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRestaurantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RestaurantIDResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateRestaurantMenuResponse parses an HTTP response from a UpdateRestaurantMenuWithResponse call
func ParseUpdateRestaurantMenuResponse(rsp *http.Response) (*UpdateRestaurantMenuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRestaurantMenuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /restaurants)
	CreateRestaurant(w http.ResponseWriter, r *http.Request)

	// (PUT /restaurants/{restaurantID}/menu)
	UpdateRestaurantMenu(w http.ResponseWriter, r *http.Request, restaurantID RestaurantID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /restaurants)
func (_ Unimplemented) CreateRestaurant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /restaurants/{restaurantID}/menu)
func (_ Unimplemented) UpdateRestaurantMenu(w http.ResponseWriter, r *http.Request, restaurantID RestaurantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateRestaurant operation middleware
func (siw *ServerInterfaceWrapper) CreateRestaurant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRestaurant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateRestaurantMenu operation middleware
func (siw *ServerInterfaceWrapper) UpdateRestaurantMenu(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "restaurantID" -------------
	var restaurantID RestaurantID

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurantID", runtime.ParamLocationPath, chi.URLParam(r, "restaurantID"), &restaurantID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "restaurantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRestaurantMenu(w, r, restaurantID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/restaurants", wrapper.CreateRestaurant)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/restaurants/{restaurantID}/menu", wrapper.UpdateRestaurantMenu)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/jNgz9KwbbQwsYo2TmUviW7hfSop3FbqZ7GASFYjOxFrGkUnTQbOD/Xkj+Tjw7",
	"KXaPc4tFkXwUHx9zgtQU1mjU7CA5gZUkC2Sk8PUBHcuSpObla/+doUtJWVZGQwLUWSOVRT+Vpcp+hhiU",
	"t1nJOcSgZYGjm8vXEAPhP6UizCBhKjEGl+ZYSJ9ga6iQDAn4YBADH633d0xK76CqKu/srNEOA8A3heXj",
	"h+bkEuGfJnplNKNmqGJ4Q2RoeDltbMkJpLV7lUrvJz4773wawLJkLBKrOmmBzsldiHCOb1jbY3dx3RVi",
	"Np8x5bqQMdQHjf9aTBmzKOD0gIfP/x1wq+x5yCq7Cu3978GzzhSCL7KM0LnLrKni40TeGBxLxicshMjz",
	"r9huJ21flH2+wjZ4XCNrcdTel7XH8AfqcslYXPmgLeknDJZUOrQozbhDmmpCE6X1mehJDA7TkhQfP/ou",
	"1Ig2KAlpUXLef71tZ+q3TytoeuYj1dZ+yHJmW/da6a1peSbTwLNmkN+u3t2/u4+WzpXoIIaS9o2nS4TY",
	"Kc7LzU1qCkH4RS4KRWp+eye2vDM789edULXfBZ1WOUYf2RBGn3ATLd4vI+UiK4kjs404x6jJm2FhtGMK",
	"fI8G3PdVKN57iKM4EMMBydVZ5jezm5lPbixqaRUkcBeO4iBX4QFFL1U1l40L9fu2h0zLDBJ4RSgZ+/Fs",
	"NA0d/2qy4zeMqOyn6EfCLSTwg+gFWjTzJtphe5psZ4xqyNSGv2bE01BjNBD5psQLAT8X5dvZ/KkCunti",
	"UtsCiK0s9/x8gLGaV6GCYffEabh1KlGgLn3U9w+ry4aWNhs11M98oEW/DR+nAfVXRiVBtf5enGiBX57+",
	"rRiLWonaH19jTSdkVdd+SSSPE3uriz0pPOd3r+JT/cRDPnnX/0Gq2RWcGP0d+CY2xWDLicl/eCHKC1HG",
	"sjPYxL75VTxew49r32GHdGjZ0S/NRIhTbhxXycka4ko4v7zEwf87OUhScrOvi8qbNdTBhL1J5T4ce6oa",
	"OjP/MpvNPLp19V8AAAD//24cbjbiCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
