// Package customerapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package customerapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for OrderStatus.
const (
	ApprovalPending OrderStatus = "ApprovalPending"
	Approved        OrderStatus = "Approved"
	Unknown         OrderStatus = "Unknown"
)

// Address defines model for Address.
type Address struct {
	City    string  `json:"city"`
	State   string  `json:"state"`
	Street1 string  `json:"street1"`
	Street2 *string `json:"street2,omitempty"`
	Zip     string  `json:"zip"`
}

// MenuItemQuantities defines model for MenuItemQuantities.
type MenuItemQuantities map[string]int

// Order defines model for Order.
type Order struct {
	OrderId    string      `json:"order_id"`
	OrderTotal int         `json:"order_total"`
	Status     OrderStatus `json:"status"`
}

// OrderStatus defines model for OrderStatus.
type OrderStatus string

// OrderID defines model for OrderID.
type OrderID = openapi_types.UUID

// ConsumerAddressIDResponse defines model for ConsumerAddressIDResponse.
type ConsumerAddressIDResponse struct {
	AddressId  string `json:"address_id"`
	ConsumerId string `json:"consumer_id"`
}

// ConsumerIDResponse defines model for ConsumerIDResponse.
type ConsumerIDResponse struct {
	Id string `json:"id"`
}

// ConsumerResponse defines model for ConsumerResponse.
type ConsumerResponse struct {
	ConsumerId string `json:"consumer_id"`
	Name       string `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// OrderIDResponse defines model for OrderIDResponse.
type OrderIDResponse struct {
	Id string `json:"id"`
}

// OrderResponse defines model for OrderResponse.
type OrderResponse struct {
	Order Order `json:"order"`
}

// SignInResponse defines model for SignInResponse.
type SignInResponse struct {
	Token string `json:"token"`
}

// AddConsumerAddressJSONBody defines parameters for AddConsumerAddress.
type AddConsumerAddressJSONBody struct {
	Address Address `json:"address"`
	Name    string  `json:"name"`
}

// CreateOrderJSONBody defines parameters for CreateOrder.
type CreateOrderJSONBody struct {
	AddressId    string             `json:"address_id"`
	ConsumerId   string             `json:"consumer_id"`
	LineItems    MenuItemQuantities `json:"line_items"`
	RestaurantId string             `json:"restaurant_id"`
}

// RegisterConsumerJSONBody defines parameters for RegisterConsumer.
type RegisterConsumerJSONBody struct {
	Name string `json:"name"`
}

// SignInConsumerJSONBody defines parameters for SignInConsumer.
type SignInConsumerJSONBody struct {
	ConsumerId string `json:"consumer_id"`
}

// AddConsumerAddressJSONRequestBody defines body for AddConsumerAddress for application/json ContentType.
type AddConsumerAddressJSONRequestBody AddConsumerAddressJSONBody

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody CreateOrderJSONBody

// RegisterConsumerJSONRequestBody defines body for RegisterConsumer for application/json ContentType.
type RegisterConsumerJSONRequestBody RegisterConsumerJSONBody

// SignInConsumerJSONRequestBody defines body for SignInConsumer for application/json ContentType.
type SignInConsumerJSONRequestBody SignInConsumerJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddConsumerAddressWithBody request with any body
	AddConsumerAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddConsumerAddress(ctx context.Context, body AddConsumerAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsumer request
	GetConsumer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrderWithBody request with any body
	CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrder request
	GetOrder(ctx context.Context, orderID OrderID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterConsumerWithBody request with any body
	RegisterConsumerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterConsumer(ctx context.Context, body RegisterConsumerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SignInConsumerWithBody request with any body
	SignInConsumerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SignInConsumer(ctx context.Context, body SignInConsumerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddConsumerAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddConsumerAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddConsumerAddress(ctx context.Context, body AddConsumerAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddConsumerAddressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsumer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsumerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrder(ctx context.Context, orderID OrderID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderRequest(c.Server, orderID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterConsumerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterConsumerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterConsumer(ctx context.Context, body RegisterConsumerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterConsumerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignInConsumerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignInConsumerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignInConsumer(ctx context.Context, body SignInConsumerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignInConsumerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddConsumerAddressRequest calls the generic AddConsumerAddress builder with application/json body
func NewAddConsumerAddressRequest(server string, body AddConsumerAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddConsumerAddressRequestWithBody(server, "application/json", bodyReader)
}

// NewAddConsumerAddressRequestWithBody generates requests for AddConsumerAddress with any type of body
func NewAddConsumerAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addresses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConsumerRequest generates requests for GetConsumer
func NewGetConsumerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/consumer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrderRequest calls the generic CreateOrder builder with application/json body
func NewCreateOrderRequest(server string, body CreateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrderRequestWithBody generates requests for CreateOrder with any type of body
func NewCreateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrderRequest generates requests for GetOrder
func NewGetOrderRequest(server string, orderID OrderID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderID", runtime.ParamLocationPath, orderID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterConsumerRequest calls the generic RegisterConsumer builder with application/json body
func NewRegisterConsumerRequest(server string, body RegisterConsumerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterConsumerRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterConsumerRequestWithBody generates requests for RegisterConsumer with any type of body
func NewRegisterConsumerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSignInConsumerRequest calls the generic SignInConsumer builder with application/json body
func NewSignInConsumerRequest(server string, body SignInConsumerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSignInConsumerRequestWithBody(server, "application/json", bodyReader)
}

// NewSignInConsumerRequestWithBody generates requests for SignInConsumer with any type of body
func NewSignInConsumerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddConsumerAddressWithBodyWithResponse request with any body
	AddConsumerAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddConsumerAddressResponse, error)

	AddConsumerAddressWithResponse(ctx context.Context, body AddConsumerAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*AddConsumerAddressResponse, error)

	// GetConsumerWithResponse request
	GetConsumerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConsumerResponse, error)

	// CreateOrderWithBodyWithResponse request with any body
	CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	// GetOrderWithResponse request
	GetOrderWithResponse(ctx context.Context, orderID OrderID, reqEditors ...RequestEditorFn) (*GetOrderResponse, error)

	// RegisterConsumerWithBodyWithResponse request with any body
	RegisterConsumerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterConsumerResponse, error)

	RegisterConsumerWithResponse(ctx context.Context, body RegisterConsumerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterConsumerResponse, error)

	// SignInConsumerWithBodyWithResponse request with any body
	SignInConsumerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignInConsumerResponse, error)

	SignInConsumerWithResponse(ctx context.Context, body SignInConsumerJSONRequestBody, reqEditors ...RequestEditorFn) (*SignInConsumerResponse, error)
}

type AddConsumerAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ConsumerAddressIDResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddConsumerAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddConsumerAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsumerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConsumerResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetConsumerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsumerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrderIDResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterConsumerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ConsumerIDResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RegisterConsumerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterConsumerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SignInConsumerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignInResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SignInConsumerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SignInConsumerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddConsumerAddressWithBodyWithResponse request with arbitrary body returning *AddConsumerAddressResponse
func (c *ClientWithResponses) AddConsumerAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddConsumerAddressResponse, error) {
	rsp, err := c.AddConsumerAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddConsumerAddressResponse(rsp)
}

func (c *ClientWithResponses) AddConsumerAddressWithResponse(ctx context.Context, body AddConsumerAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*AddConsumerAddressResponse, error) {
	rsp, err := c.AddConsumerAddress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddConsumerAddressResponse(rsp)
}

// GetConsumerWithResponse request returning *GetConsumerResponse
func (c *ClientWithResponses) GetConsumerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConsumerResponse, error) {
	rsp, err := c.GetConsumer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsumerResponse(rsp)
}

// CreateOrderWithBodyWithResponse request with arbitrary body returning *CreateOrderResponse
func (c *ClientWithResponses) CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

// GetOrderWithResponse request returning *GetOrderResponse
func (c *ClientWithResponses) GetOrderWithResponse(ctx context.Context, orderID OrderID, reqEditors ...RequestEditorFn) (*GetOrderResponse, error) {
	rsp, err := c.GetOrder(ctx, orderID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderResponse(rsp)
}

// RegisterConsumerWithBodyWithResponse request with arbitrary body returning *RegisterConsumerResponse
func (c *ClientWithResponses) RegisterConsumerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterConsumerResponse, error) {
	rsp, err := c.RegisterConsumerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterConsumerResponse(rsp)
}

func (c *ClientWithResponses) RegisterConsumerWithResponse(ctx context.Context, body RegisterConsumerJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterConsumerResponse, error) {
	rsp, err := c.RegisterConsumer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterConsumerResponse(rsp)
}

// SignInConsumerWithBodyWithResponse request with arbitrary body returning *SignInConsumerResponse
func (c *ClientWithResponses) SignInConsumerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignInConsumerResponse, error) {
	rsp, err := c.SignInConsumerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignInConsumerResponse(rsp)
}

func (c *ClientWithResponses) SignInConsumerWithResponse(ctx context.Context, body SignInConsumerJSONRequestBody, reqEditors ...RequestEditorFn) (*SignInConsumerResponse, error) {
	rsp, err := c.SignInConsumer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignInConsumerResponse(rsp)
}

// ParseAddConsumerAddressResponse parses an HTTP response from a AddConsumerAddressWithResponse call
func ParseAddConsumerAddressResponse(rsp *http.Response) (*AddConsumerAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddConsumerAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ConsumerAddressIDResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetConsumerResponse parses an HTTP response from a GetConsumerWithResponse call
func ParseGetConsumerResponse(rsp *http.Response) (*GetConsumerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsumerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConsumerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrderResponse parses an HTTP response from a CreateOrderWithResponse call
func ParseCreateOrderResponse(rsp *http.Response) (*CreateOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrderIDResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrderResponse parses an HTTP response from a GetOrderWithResponse call
func ParseGetOrderResponse(rsp *http.Response) (*GetOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegisterConsumerResponse parses an HTTP response from a RegisterConsumerWithResponse call
func ParseRegisterConsumerResponse(rsp *http.Response) (*RegisterConsumerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterConsumerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ConsumerIDResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSignInConsumerResponse parses an HTTP response from a SignInConsumerWithResponse call
func ParseSignInConsumerResponse(rsp *http.Response) (*SignInConsumerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SignInConsumerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignInResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /addresses)
	AddConsumerAddress(w http.ResponseWriter, r *http.Request)

	// (GET /consumer)
	GetConsumer(w http.ResponseWriter, r *http.Request)

	// (POST /orders)
	CreateOrder(w http.ResponseWriter, r *http.Request)

	// (GET /orders/{orderID})
	GetOrder(w http.ResponseWriter, r *http.Request, orderID OrderID)

	// (POST /register)
	RegisterConsumer(w http.ResponseWriter, r *http.Request)

	// (POST /signin)
	SignInConsumer(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /addresses)
func (_ Unimplemented) AddConsumerAddress(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /consumer)
func (_ Unimplemented) GetConsumer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /orders)
func (_ Unimplemented) CreateOrder(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /orders/{orderID})
func (_ Unimplemented) GetOrder(w http.ResponseWriter, r *http.Request, orderID OrderID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /register)
func (_ Unimplemented) RegisterConsumer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /signin)
func (_ Unimplemented) SignInConsumer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AddConsumerAddress operation middleware
func (siw *ServerInterfaceWrapper) AddConsumerAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddConsumerAddress(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsumer operation middleware
func (siw *ServerInterfaceWrapper) GetConsumer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsumer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrder(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrder operation middleware
func (siw *ServerInterfaceWrapper) GetOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderID" -------------
	var orderID OrderID

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderID", runtime.ParamLocationPath, chi.URLParam(r, "orderID"), &orderID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrder(w, r, orderID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterConsumer operation middleware
func (siw *ServerInterfaceWrapper) RegisterConsumer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterConsumer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SignInConsumer operation middleware
func (siw *ServerInterfaceWrapper) SignInConsumer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignInConsumer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/addresses", wrapper.AddConsumerAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consumer", wrapper.GetConsumer)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders", wrapper.CreateOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/orders/{orderID}", wrapper.GetOrder)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.RegisterConsumer)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/signin", wrapper.SignInConsumer)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYzW7jNhB+FYHtoQWEyEl6KHRzk27gFoXTTdI9BMaClsYSdyWSJUduE0PvXpAUbcmW",
	"Y62rLXqzyPn5ZjjfcOgNSUQpBQeOmsQbIqmiJSAo+zVXKajZrfmZgk4Uk8gEJzERZiNgafBdVbH0exIS",
	"ZpYlxZyEhNMSvNDsloREwZ8VU5CSGFUFIdFJDiU1ZldClRRJTIwdEhJ8kUZVo2I8I3VdG2UtBddgEd0I",
	"rqsS1DRNFWg9u33f7JrNRHAEjuYnlbJgCTVwo0/aYN60vEolJChkziZ1tj6y1HztIQiNVeuyf79uR/fc",
	"EQ7blhfb2MTyEyToYutmdf6r8edDHCW2IZjPQjcCtrcT68voyzJudYZH87NSYoxQStCaZgPQesEhEJ84",
	"/C0hQUgDi9MAbhj5f6wMC20EYLZtmB/fKliRmHwT7VpU5JR0ZJ0d4HWqwyE/sIzP+AiYUXwGfjqfTmw4",
	"vidOK8yFYq+QtlF2ZadJAloH1njAdFAyrb33Jl9GqWmZPTxk+NJLQI0U4ciOAsDLN/auevdemTydJW88",
	"dMg8Dqd9mLyQ/Aa8miGUv1eUI2u1dWYyRIv77lk5dcYRMrCkOjA49yXYU5nHupXbRIG06Pdioqj0oMJ+",
	"cKK95e36XGOs63ZxLJSHrWvgVWlMPfHPXPzFSUimUiqxpsU98NSE4legzf3WSWlIKsXw5cEAdnlZAlWg",
	"phXmu693/mL/5cMjaerQWHK7u5s+R5SOAIyvhKcgTSwFm0Hi3ePd/G4ezLSuwMRcqaLR1HEUZQzzanmR",
	"iDJS8EqnJVPs8uo6WmEmMvHHdcSc3gHHHnMIbiqNogQVfIBlML2fGf5IqjAQqwBzCBrXKZSCa1S2GwSt",
	"zmACYVgYlPumSEjWoLTzdXkxuZjYMpHAqWQkJtd2KbRDk01j1IwLLqlSaJsDU4DW1Sw1XE/TvRGoGa9A",
	"408iffn3Y9CpAvVuB1/QVmo7Cw3qfjRNA3+vB7QT526M3B8NryaXx7Bv5aLj86MFsaJVgaetdMeGNitI",
	"/Nzlw/OiXhiByMdjrGfQc7R3gB4dOQhtMjy0dkQ/DMlJ7y3ztdNh+9YbhX6jgCK4RjxyhZ836IekYBw+",
	"MoTyJEd6LiRXrUgrRTme8ZToKneeFh1kQ+iV2NwG7hHXpHYceu2Pp/9NFUWb5qlZv0UuX0vtJ+5zP6id",
	"iI+I1ItzONmdib92NhRkTGMzufSy6n0j0Wk0Y1DrC66CIRXqI9ndAqOWac8Te7yzaQ5Ds4wzfvwo3Ntj",
	"9IM4+9+KIcdiYgoYP+dUBpBl7zU27onsL4WHHDISau37wm7IjKNokwuNdbyRQmEdUcmitXmfrKlidFm4",
	"GPPmmLegSSESWtjlOiRGtbv942QyMVle1P8EAAD//y6qxxaGEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
