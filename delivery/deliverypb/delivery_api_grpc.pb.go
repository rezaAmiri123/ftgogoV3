// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: deliverypb/delivery_api.proto

package deliverypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeliveryService_CreateDelivery_FullMethodName         = "/deliverypb.DeliveryService/CreateDelivery"
	DeliveryService_GetDelivery_FullMethodName            = "/deliverypb.DeliveryService/GetDelivery"
	DeliveryService_SetCourierAvailability_FullMethodName = "/deliverypb.DeliveryService/SetCourierAvailability"
	DeliveryService_ScheduleDelivery_FullMethodName       = "/deliverypb.DeliveryService/ScheduleDelivery"
)

// DeliveryServiceClient is the client API for DeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryServiceClient interface {
	CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*CreateDeliveryResponse, error)
	GetDelivery(ctx context.Context, in *GetDeliveryRequest, opts ...grpc.CallOption) (*GetDeliveryResponse, error)
	SetCourierAvailability(ctx context.Context, in *SetCourierAvailabilityRequest, opts ...grpc.CallOption) (*SetCourierAvailabilityResponse, error)
	ScheduleDelivery(ctx context.Context, in *ScheduleDeliveryRequest, opts ...grpc.CallOption) (*ScheduleDeliveryResponse, error)
}

type deliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryServiceClient(cc grpc.ClientConnInterface) DeliveryServiceClient {
	return &deliveryServiceClient{cc}
}

func (c *deliveryServiceClient) CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*CreateDeliveryResponse, error) {
	out := new(CreateDeliveryResponse)
	err := c.cc.Invoke(ctx, DeliveryService_CreateDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) GetDelivery(ctx context.Context, in *GetDeliveryRequest, opts ...grpc.CallOption) (*GetDeliveryResponse, error) {
	out := new(GetDeliveryResponse)
	err := c.cc.Invoke(ctx, DeliveryService_GetDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) SetCourierAvailability(ctx context.Context, in *SetCourierAvailabilityRequest, opts ...grpc.CallOption) (*SetCourierAvailabilityResponse, error) {
	out := new(SetCourierAvailabilityResponse)
	err := c.cc.Invoke(ctx, DeliveryService_SetCourierAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) ScheduleDelivery(ctx context.Context, in *ScheduleDeliveryRequest, opts ...grpc.CallOption) (*ScheduleDeliveryResponse, error) {
	out := new(ScheduleDeliveryResponse)
	err := c.cc.Invoke(ctx, DeliveryService_ScheduleDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServiceServer is the server API for DeliveryService service.
// All implementations must embed UnimplementedDeliveryServiceServer
// for forward compatibility
type DeliveryServiceServer interface {
	CreateDelivery(context.Context, *CreateDeliveryRequest) (*CreateDeliveryResponse, error)
	GetDelivery(context.Context, *GetDeliveryRequest) (*GetDeliveryResponse, error)
	SetCourierAvailability(context.Context, *SetCourierAvailabilityRequest) (*SetCourierAvailabilityResponse, error)
	ScheduleDelivery(context.Context, *ScheduleDeliveryRequest) (*ScheduleDeliveryResponse, error)
	mustEmbedUnimplementedDeliveryServiceServer()
}

// UnimplementedDeliveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryServiceServer struct {
}

func (UnimplementedDeliveryServiceServer) CreateDelivery(context.Context, *CreateDeliveryRequest) (*CreateDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelivery not implemented")
}
func (UnimplementedDeliveryServiceServer) GetDelivery(context.Context, *GetDeliveryRequest) (*GetDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelivery not implemented")
}
func (UnimplementedDeliveryServiceServer) SetCourierAvailability(context.Context, *SetCourierAvailabilityRequest) (*SetCourierAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCourierAvailability not implemented")
}
func (UnimplementedDeliveryServiceServer) ScheduleDelivery(context.Context, *ScheduleDeliveryRequest) (*ScheduleDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleDelivery not implemented")
}
func (UnimplementedDeliveryServiceServer) mustEmbedUnimplementedDeliveryServiceServer() {}

// UnsafeDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServiceServer will
// result in compilation errors.
type UnsafeDeliveryServiceServer interface {
	mustEmbedUnimplementedDeliveryServiceServer()
}

func RegisterDeliveryServiceServer(s grpc.ServiceRegistrar, srv DeliveryServiceServer) {
	s.RegisterService(&DeliveryService_ServiceDesc, srv)
}

func _DeliveryService_CreateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).CreateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_CreateDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).CreateDelivery(ctx, req.(*CreateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_GetDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).GetDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_GetDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).GetDelivery(ctx, req.(*GetDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_SetCourierAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCourierAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).SetCourierAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_SetCourierAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).SetCourierAvailability(ctx, req.(*SetCourierAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_ScheduleDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).ScheduleDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_ScheduleDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).ScheduleDelivery(ctx, req.(*ScheduleDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryService_ServiceDesc is the grpc.ServiceDesc for DeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deliverypb.DeliveryService",
	HandlerType: (*DeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDelivery",
			Handler:    _DeliveryService_CreateDelivery_Handler,
		},
		{
			MethodName: "GetDelivery",
			Handler:    _DeliveryService_GetDelivery_Handler,
		},
		{
			MethodName: "SetCourierAvailability",
			Handler:    _DeliveryService_SetCourierAvailability_Handler,
		},
		{
			MethodName: "ScheduleDelivery",
			Handler:    _DeliveryService_ScheduleDelivery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deliverypb/delivery_api.proto",
}
