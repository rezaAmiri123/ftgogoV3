// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ddd "github.com/rezaAmiri123/ftgogoV3/internal/ddd"
	mock "github.com/stretchr/testify/mock"
)

// EventPublisher is an autogenerated mock type for the EventPublisher type
type EventPublisher struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, events
func (_m *EventPublisher) Publish(ctx context.Context, events ...ddd.Event) error {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...ddd.Event) error); ok {
		r0 = rf(ctx, events...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventPublisher creates a new instance of EventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventPublisher {
	mock := &EventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
