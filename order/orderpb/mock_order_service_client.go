// Code generated by mockery v2.33.0. DO NOT EDIT.

package orderpb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderServiceClient is an autogenerated mock type for the OrderServiceClient type
type MockOrderServiceClient struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, in, opts
func (_m *MockOrderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateOrderRequest, ...grpc.CallOption) (*CreateOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateOrderRequest, ...grpc.CallOption) *CreateOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, in, opts
func (_m *MockOrderServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrderRequest, ...grpc.CallOption) (*GetOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrderRequest, ...grpc.CallOption) *GetOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockOrderServiceClient creates a new instance of MockOrderServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderServiceClient {
	mock := &MockOrderServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
