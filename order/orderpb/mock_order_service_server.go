// Code generated by mockery v2.33.0. DO NOT EDIT.

package orderpb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderServiceServer is an autogenerated mock type for the OrderServiceServer type
type MockOrderServiceServer struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: _a0, _a1
func (_m *MockOrderServiceServer) CreateOrder(_a0 context.Context, _a1 *CreateOrderRequest) (*CreateOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateOrderRequest) *CreateOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: _a0, _a1
func (_m *MockOrderServiceServer) GetOrder(_a0 context.Context, _a1 *GetOrderRequest) (*GetOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrderRequest) (*GetOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrderRequest) *GetOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedOrderServiceServer provides a mock function with given fields:
func (_m *MockOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	_m.Called()
}

// NewMockOrderServiceServer creates a new instance of MockOrderServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderServiceServer {
	mock := &MockOrderServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
